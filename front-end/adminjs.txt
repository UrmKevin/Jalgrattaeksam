import React, { useEffect, useState } from 'react';
import '../App.css';

function Admin() {
  const [eksamid, setEksamid] = useState([]);
  const [newEksam, setNewEksam] = useState({
    koha: "",
    aeg: "",
    eksamineerija: "",
  });
  const [updatedEksam, setUpdatedEksam] = useState({
    id: 0,
    koha: '',
    aeg: '',
    eksamineerija: '',
  });
  const [editIndex, setEditIndex] = useState(-1); 

  // get database
  const fetchEksamid = async () => {
    try {
      const response = await fetch('https://localhost:7025/Eksam');
      const data = await response.json();
      setEksamid(data);
    } catch (error) {
      console.error('Error fetching eksamid:', error);
    }
  };
  useEffect(() => {
    fetchEksamid();
  }, []);
  // delete
  function kustuta(index) {
    fetch(`https://localhost:7025/Eksam/kustuta/${index}`, {"method": "DELETE"})
      .then(res => res.json())
      .then(json => setEksamid(json));
  }
  // add
  const lisa = async () => {
    try {
      await fetch('https://localhost:7025/Eksam/lisa', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newEksam),
      }); 
      fetchEksamid();
    } catch (error) {
      console.error('Error adding eksam:', error);
    }
  };
  // update
  const updateEksam = async () => {
    const response = await fetch(`https://localhost:7025/Eksam/muuda/${updatedEksam.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedEksam),
    });
  
    if (response.ok) {
      const updatedEksamList = await response.json();
      setEksamid(updatedEksamList);
      setUpdatedEksam({
        id: 0,
        koha: '',
        aeg: '',
        eksamineerija: '',
      });
      setEditIndex(-1); // Reset the editIndex after successful update
    } else {
      console.error('Failed to update Eksam');
    }
  };
  const handleInputChange = (e) => {
    const { name, value } = e.target;
  
    try {
      console.log('Original value:', value);
  
      // If the input is for 'aeg', parse and format the date and time string
      const updatedValue = name === 'aeg' ? new Date(value).toISOString() : value;
  
      console.log('Updated value:', updatedValue);
  
      setUpdatedEksam((prevEksam) => ({
        ...prevEksam,
        [name]: updatedValue,
      }));
  
      console.log('Updated state:', updatedEksam);
    } catch (error) {
      console.error('Error parsing date:', error);
    }
  };
  const setEditEksam = (eksam) => {
    setUpdatedEksam({
      id: eksam.id,
      koha: eksam.koha,
      aeg: eksam.aeg,
      eksamineerija: eksam.eksamineerija,
    });
  };

  //formate date and time
  function formatDateTime(dateTimeString) {
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZoneName: 'short',
    };
  
    const formattedDateTime = new Date(dateTimeString).toLocaleString(undefined, options);
    return formattedDateTime;
  }

  return (
    <div className="Admin">
      <h1>Admini lehe</h1>
      <div>
        <label>Koha:</label>
        <input
          type="text"
          value={newEksam.koha}
          onChange={(e) => setNewEksam({ ...newEksam, koha: e.target.value })}
        />
      </div>
      <div>
        <label>Aeg:</label>
        <input
          type="datetime-local"
          value={newEksam.aeg}
          onChange={(e) => setNewEksam({ ...newEksam, aeg: e.target.value })}
        />
      </div>
      <div>
        <label>Eksamineerija:</label>
        <input
          type="text"
          value={newEksam.eksamineerija}
          onChange={(e) => setNewEksam({ ...newEksam, eksamineerija: e.target.value })}
        />
      </div>
      <button onClick={lisa}>Add Eksam</button>
      <br/>
      <table>
        <thead>
          <tr>
            <th>Koha</th>
            <th>Aeg</th>
            <th>Eksamineerija</th>
            <th>Kustuta</th>
            <th>Muuda</th>
          </tr>
        </thead>
        <tbody>
          {eksamid.map((eksam, index) => (
            <tr key={eksam.id}>
              <td>{editIndex === index ? (
                <input
                  type="text"
                  value={updatedEksam.koha}
                  onChange={(e) => setUpdatedEksam({ ...updatedEksam, koha: e.target.value })}
                />
              ) : eksam.koha}</td>
              <td>{editIndex === index ? (
                <input
                  type="datetime-local"
                  value={updatedEksam.aeg}
                  onChange={(e) => setUpdatedEksam({ ...updatedEksam, aeg: e.target.value })}
                />
              ) : formatDateTime(eksam.aeg)}</td>
              <td>{editIndex === index ? (
                <input
                  type="text"
                  value={updatedEksam.eksamineerija}
                  onChange={(e) => setUpdatedEksam({ ...updatedEksam, eksamineerija: e.target.value })}
                />
              ) : eksam.eksamineerija}</td>
              <td><button onClick={() => kustuta(eksam.id)} id='X'>x</button></td>
              <td>
                {editIndex === index ? (
                  <button onClick={() => updateEksam()}>Update</button>
                ) : (
                  <button onClick={() => { setEditIndex(index); setEditEksam(eksam); }}>Edit</button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Admin;